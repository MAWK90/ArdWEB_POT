{
  "author": {
    "name": "Henri Bouvier"
  },
  "name": "node-engine",
  "description": "A server Engine using cluster",
  "version": "0.0.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/hbouvier/node-engine.git"
  },
  "keywords": [
    "cluser",
    "server",
    "engine"
  ],
  "main": "./lib/engine.js",
  "bin": {
    "engine": "./bin/engine"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "winston": ">= 0.7.1",
    "q": ">= 0.9.3",
    "node-options": ">= 0.0.2"
  },
  "devDependencies": {
    "complexity-report": "latest"
  },
  "scripts": {
    "test": "node tests/tests.js"
  },
  "configuration": {
    "name": "engine",
    "workers": 0,
    "port": 3000,
    "level": "info",
    "startTimeoutInMs": 5000,
    "shutdownTimeoutInMs": 5000,
    "stopTimeoutInMs": 1000
  },
  "readme": "# High Availability Cluster Engine/Container\n\nThis module can be installed either as a Container for an existing Node.js\nserver script, to make it Highly Available using Node Cluster or embeded as a\nmodule dependency inside antoher Node.js server.\n\n#LICENSE:\n\nThis module is licensed under the Apache License v2.0\n\n# Usage as a Container\n\nnpm install -g node-engine\n\nnode-engine path/to/existing/server.js -- parameters to exisiting server\n\nExample: to make your script 'httpServer.js' that need a command line argument of\n'port=8080' Highly Available, you would invoke it like this:\n\n    node-engine httpServer.js -- port=8080\n\n# Include this as a module in your own project\n\n## mainWithServer.js\n    var engine = require('node-engine'),\n        server = engine({\n            \"script\"       : \"./MyHttpServer.js\"\n        });\n    if (server) {\n        server.then(function () {\n            console.log('server started');\n        }).fail(function (reason) {\n            console.log('server fail: ', reason);\n            process.exit(-1);\n        });\n    } else {\n        console.log('worker started');\n    }\n    \n## MyHttpServer.js\n    var app = require('express')();\n    \n    app.get('/', function(req, res) {\n        res.end('Hello World');\n    });\n    \n    app.listen(process.env.PORT);\n\n## If you prefer to package your server as a module to receive notification\n## when starting and stopping\n\n## mainWithModule.js\n\n    var engine = require('node-engine'),\n        server = engine({\n            \"script\"       : \"./MyHttpModule.js\",\n            \"scriptConfig\" : {\n                \"port\"         : options.port\n            },\n        });\n        \n    if (server) {\n        server.then(function () {\n            console.log('server started');\n        }).fail(function (reason) {\n            console.log('server fail: ', reason);\n            process.exit(-1);\n        });\n    } else {\n        console.log('worker started');\n    }\n    \n## MyHttpModule.js\n    module.exports = function () {\n        var app = require('express')();\n        \n        function start(options) {\n            app.get('/', function(req, res) {\n                res.end('Hello World');\n            });\n            \n            app.listen(options.port);\n        }\n        function stop(forcefull) {\n            console.log('stopping ' + (forcefull ? 'forcefully' : ''));\n        }\n\n        return {\n            \"start\"         : start,\n            \"stop\"          : stop\n        };\n    }();\n    \n\n## Other configuration options that can be passed to the Engine\n    var winston = require('winston),\n        engine  = require('node-engine'),\n        server  = engine({\n            \"workers\"      : os.cpus().length,\n            \"script\"       : \"./MyHttpServer.js\",\n            \"scriptArgv\"   : ['--user=bob', '--password=SuperSecret'],\n            \"scriptConfig\" : {\n                \"port\"         : process.env.PORT\n            },\n            \"startTimeoutInMs\"    : 5000,\n            \"shutdownTimeoutInMs\" : 5000,\n            \"stopTimeoutInMs\"     : 1000,\n            \"logger\" : new (winston.Logger)({transports: [\n                new (winston.transports.Console)({\n                                                    \"level\"    : \"verbose\",\n                                                    \"json\"     : false,\n                                                    \"colorize\" : true\n                })\n            ]});\n        });\n        \nworkers      : Number of worker process (minimum=1, default=Number of CPU)\nscript       : Path to the server script / module\nscriptArgv   : Command Line arguments (e.g. process.argv_ passed to the server script\nscriptConfig : When the server script is a module, the \"start\" function of that\n               module will be invoked with a configuration object containing the\n               \"scriptConfig\" object as-is.\nlogger       : An instance of \"winston\" logger to use for loging.\nshutdownTimeoutInMs : The maximum time allowed, in milli-seconds, for a worker\n                      to shutdown nicely (e.g. time to finish precessing its\n                      current request. If it does not finish in that time it will\n                      be killed by the engine.\nstopTimeoutInMs     : The maximum time allowed, in milli-seconds, for a worker\n                      to die when killed, if it does not die in the allowed time\n                      the server will consider this as an engine failure and go\n                      into an error state.\nstartTimeoutInMs    : The maximum time allowed, in milli-seconds, for a worker\n                      to start listening for incoming connection. If the worker\n                      is not ready to process request in that time it will be\n                      killed by the engine. If ther 'server' does not listen\n                       (e.g. it is not a networking server) it has to send a\n                      message to the Enging to notify it that it is ready like\n                      this:\n                      \n    process.send({\n            \"action\"     : \"listening\",\n            \"id\"         : cluster.worker.id,\n            \"origin\"     : 'worker'\n        });                      \n                      \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hbouvier/node-engine/issues"
  },
  "_id": "node-engine@0.0.5",
  "dist": {
    "shasum": "e1a84fce49798e40f174598a6ef6b8082392af53"
  },
  "_from": "node-engine@0.0.5",
  "_resolved": "https://registry.npmjs.org/node-engine/-/node-engine-0.0.5.tgz"
}
